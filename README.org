#+TITLE: Petalisp

Petalisp is an attempt to generate high performance code for parallel
computers, by JIT-compiling definitions of data structures. It is not a
full blown programming language, but rather a carefully crafted extension
of Common Lisp that allows for extreme optimization and parallelization.

** Showcases
Petalisp is still under development, so the following examples may still
change slightly. Nevertheless they give a good glimpse on what programming
with Petalisp will be like.

Example 1: transposing a matrix
#+BEGIN_SRC lisp
(defun transpose (A)
  (-> A (τ (m n) (n m))))
#+END_SRC

Example 2: a simple matrix multiplication
#+BEGIN_SRC lisp
(defun matrix-multiplication (A B)
  (β #'+
     (α #'*
        (-> A (τ (m n) (m 1 n)))
        (-> B (τ (n k) (1 k n))))))
#+END_SRC

Example 3: the numerical Jacobi scheme in two dimensions
#+BEGIN_SRC lisp
(defun jacobi-2d (grid iterations)
  (let ((interior (subspace grid (σ ((+ start 1) step (- end 1))
                                    ((+ start 1) step (- end 1))))))
    (if (zerop iterations) grid
        (jacobi-2d
         (fuse x
               (α #'* 0.25
                  (α #'+
                     (-> x (τ (i0 i1) ((+ i0 1) i1)) interior)
                     (-> x (τ (i0 i1) ((- i0 1) i1)) interior)
                     (-> x (τ (i0 i1) (i0 (+ i1 1))) interior)
                     (-> x (τ (i0 i1) (i0 (- i1 1))) interior))))
         (- iterations 1)))))
#+END_SRC

** Frequently Asked Questions

*** Why is Petalisp licensed under AGPL?
I am aware that this license prevents some people from using or
contributing to this piece of software, which is a shame. But unfortunately
the majority of software developers have not yet understood that

1. in a digital world, free software is a necessary prerequisite for a free
   society
2. when developing software, open collaboration is way more efficient than
   competition

So as long as distribution of non-free software is socially accepted,
copyleft licenses like the AGPL seem to be the lesser evil.

That being said, I am willing to discuss relicensing on an individual
basis.

*** Why is Petalisp written in Common Lisp?
To my own surprise, Common Lisp is --- as of 2017 --- still the sweetest
spot in the programming language design space. The language appears even
more attractive if one considers its plethora of high quality libraries and
implementations.
