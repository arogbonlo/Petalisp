;;;; Â© 2016-2019 Marco Heisig         - license: GNU AGPLv3 -*- coding: utf-8 -*-

(in-package #:petalisp.type-codes)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Numeric Contagion

(defun slow-numeric-contagion (&rest type-codes)
  (labels ((initial-state ()
             (type-code-subtypecase (pop type-codes)
               ((not number) (abort-type-inference))
               (short-float (short-float-state))
               (single-float (single-float-state))
               (double-float (double-float-state))
               (long-float (long-float-state))
               (float (float-state))
               (integer (integer-state))
               (rational (rational-state))
               (real (real-state))
               ((complex short-float) (complex-short-float-state))
               ((complex single-float) (complex-single-float-state))
               ((complex double-float) (complex-double-float-state))
               ((complex long-float) (complex-long-float-state))
               (complex (complex-state))
               (t (number-state))))
           (short-float-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'short-float)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (short-float-state))
                   (single-float (single-float-state))
                   (double-float (double-float-state))
                   (long-float (long-float-state))
                   (float (float-state))
                   (integer (short-float-state))
                   (rational (short-float-state))
                   (real (real-state))
                   ((complex short-float) (complex-short-float-state))
                   ((complex single-float) (complex-single-float-state))
                   ((complex double-float) (complex-double-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (single-float-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'single-float)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (single-float-state))
                   (single-float (single-float-state))
                   (double-float (double-float-state))
                   (long-float (long-float-state))
                   (float (float-state))
                   (integer (single-float-state))
                   (rational (single-float-state))
                   (real (real-state))
                   ((complex short-float) (complex-single-float-state))
                   ((complex single-float) (complex-single-float-state))
                   ((complex double-float) (complex-double-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (double-float-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'double-float)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (double-float-state))
                   (single-float (double-float-state))
                   (double-float (double-float-state))
                   (long-float (long-float-state))
                   (float (float-state))
                   (integer (double-float-state))
                   (rational (double-float-state))
                   (real (real-state))
                   ((complex short-float) (complex-double-float-state))
                   ((complex single-float) (complex-double-float-state))
                   ((complex double-float) (complex-double-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (long-float-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'long-float)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (long-float-state))
                   (single-float (long-float-state))
                   (double-float (long-float-state))
                   (long-float (long-float-state))
                   (float (float-state))
                   (integer (long-float-state))
                   (rational (long-float-state))
                   (real (real-state))
                   ((complex short-float) (complex-long-float-state))
                   ((complex single-float) (complex-long-float-state))
                   ((complex double-float) (complex-long-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (float-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'float)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (float-state))
                   (single-float (float-state))
                   (double-float (float-state))
                   (long-float (float-state))
                   (float (float-state))
                   (integer (float-state))
                   (rational (float-state))
                   (real (real-state))
                   ((complex short-float) (complex-state))
                   ((complex single-float) (complex-state))
                   ((complex double-float) (complex-state))
                   ((complex long-float) (complex-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (integer-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'integer)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (short-float-state))
                   (single-float (single-float-state))
                   (double-float (double-float-state))
                   (long-float (long-float-state))
                   (float (float-state))
                   (integer (integer-state))
                   (rational (rational-state))
                   (real (real-state))
                   ((complex short-float) (complex-short-float-state))
                   ((complex single-float) (complex-single-float-state))
                   ((complex double-float) (complex-double-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (rational-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'rational)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (short-float-state))
                   (single-float (single-float-state))
                   (double-float (double-float-state))
                   (long-float (long-float-state))
                   (float (float-state))
                   (integer (rational-state))
                   (rational (rational-state))
                   (real (real-state))
                   ((complex short-float) (complex-short-float-state))
                   ((complex single-float) (complex-single-float-state))
                   ((complex double-float) (complex-double-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (real-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'real)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (real-state))
                   (single-float (real-state))
                   (double-float (real-state))
                   (long-float (real-state))
                   (float (real-state))
                   (integer (real-state))
                   (rational (real-state))
                   (real (real-state))
                   ((complex short-float) (complex-state))
                   ((complex single-float) (complex-state))
                   ((complex double-float) (complex-state))
                   ((complex long-float) (complex-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (complex-short-float-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier '(complex short-float))
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (complex-short-float-state))
                   (single-float (complex-single-float-state))
                   (double-float (complex-double-float-state))
                   (long-float (complex-long-float-state))
                   (float (complex-state))
                   (integer (complex-short-float-state))
                   (rational (complex-short-float-state))
                   (real (complex-state))
                   ((complex short-float) (complex-short-float-state))
                   ((complex single-float) (complex-single-float-state))
                   ((complex double-float) (complex-double-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (complex-single-float-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier '(complex single-float))
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (complex-single-float-state))
                   (single-float (complex-single-float-state))
                   (double-float (complex-double-float-state))
                   (long-float (complex-long-float-state))
                   (float (complex-state))
                   (integer (complex-single-float-state))
                   (rational (complex-single-float-state))
                   (real (complex-state))
                   ((complex short-float) (complex-single-float-state))
                   ((complex single-float) (complex-single-float-state))
                   ((complex double-float) (complex-double-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (complex-double-float-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier '(complex double-float))
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (complex-double-float-state))
                   (single-float (complex-double-float-state))
                   (double-float (complex-double-float-state))
                   (long-float (complex-long-float-state))
                   (float (complex-state))
                   (integer (complex-double-float-state))
                   (rational (complex-double-float-state))
                   (real (complex-state))
                   ((complex short-float) (complex-double-float-state))
                   ((complex single-float) (complex-double-float-state))
                   ((complex double-float) (complex-double-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (complex-long-float-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier '(complex long-float))
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (short-float (complex-long-float-state))
                   (single-float (complex-long-float-state))
                   (double-float (complex-long-float-state))
                   (long-float (complex-long-float-state))
                   (float (complex-state))
                   (integer (complex-long-float-state))
                   (rational (complex-long-float-state))
                   (real (complex-state))
                   ((complex short-float) (complex-long-float-state))
                   ((complex single-float) (complex-long-float-state))
                   ((complex double-float) (complex-long-float-state))
                   ((complex long-float) (complex-long-float-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (complex-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'complex)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (float (complex-state))
                   (integer (complex-state))
                   (rational (complex-state))
                   (real (complex-state))
                   (complex (complex-state))
                   (t (number-state)))))
           (number-state ()
             (if (null type-codes)
                 (type-code-from-type-specifier 'number)
                 (type-code-subtypecase (pop type-codes)
                   ((not number) (abort-type-inference))
                   (t (number-state))))))
    (initial-state)))

(defun numeric-contagion (type-code-1 type-code-2)
  (with-type-code-caching (type-code-1 type-code-2)
    (with-type-inference-barrier
      (slow-numeric-contagion type-code-1 type-code-2))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; The Numbers Dictionary (CLHS 12.2)

(flet ((inference (numbers)
         (dolist (number numbers)
           (check-type-code number number))
         (type-code-from-type-specifier 't)))
  (define-type-inference-rule = (&rest numbers) (inference numbers))
  (define-type-inference-rule /= (&rest numbers) (inference numbers))
  (define-type-inference-rule < (&rest numbers) (inference numbers))
  (define-type-inference-rule > (&rest numbers) (inference numbers))
  (define-type-inference-rule <= (&rest numbers) (inference numbers))
  (define-type-inference-rule >= (&rest numbers) (inference numbers)))

(define-type-inference-rule max (&rest reals)
  (dolist (real reals)
    (check-type-code real real))
  (reduce #'type-code-union reals))

(define-type-inference-rule min (&rest reals)
  (dolist (real reals)
    (check-type-code real real))
  (reduce #'type-code-union reals))

(define-type-inference-rule minusp (real)
  (check-type-code real real)
  (type-code-from-type-specifier 't))

(define-type-inference-rule plusp (real)
  (check-type-code real real)
  (type-code-from-type-specifier 't))

(define-type-inference-rule zerop (number)
  (check-type-code number number)
  (type-code-from-type-specifier 't))

(flet ((inference (number divisor)
         (check-type-code number real)
         (check-type-code divisor real)
         (values (type-code-from-type-specifier 'integer) number)))
  (define-type-inference-rule floor (number &optional (divisor (type-code-of 1)))
    (inference number divisor))
  (define-type-inference-rule ceiling (number &optional (divisor (type-code-of 1)))
    (inference number divisor))
  (define-type-inference-rule truncate (number &optional (divisor (type-code-of 1)))
    (inference number divisor))
  (define-type-inference-rule round (number &optional (divisor (type-code-of 1)))
    (inference number divisor)))

(flet ((inference (number divisor)
         (type-code-subtypecase number
           ((not real) (abort-type-inference))
           (float
            (type-code-subtypecase divisor
              ((not real) (abort-type-inference))
              (float (numeric-contagion number divisor))
              (t number)))
           (t (numeric-contagion number divisor)))))
  (define-type-inference-rule ffloor (number &optional (divisor (type-code-of 1)))
    (inference number divisor))
  (define-type-inference-rule fceiling (number &optional (divisor (type-code-of 1)))
    (inference number divisor))
  (define-type-inference-rule ftruncate (number &optional (divisor (type-code-of 1)))
    (inference number divisor))
  (define-type-inference-rule fround (number &optional (divisor (type-code-of 1)))
    (inference number divisor)))

(flet ((inference (number)
         (type-code-subtypecase number
           ((not number) (abort-type-inference))
           ((or float (complex float)) number)
           (rational (type-code-from-type-specifier '(or single-float rational)))
           ((or rational (complex rational)) (type-code-from-type-specifier '(or single-float rational (complex rational))))
           (t (type-code-from-type-specifier 'number)))))
  (define-type-inference-rule sin (radians) (inference radians))
  (define-type-inference-rule cos (radians) (inference radians))
  (define-type-inference-rule tan (radians) (inference radians)))

;; TODO asin, acos, atan

;; TODO sinh, cosh, tanh, asinh, acosh, atanh

(define-type-inference-rule * (&rest type-codes)
  (if (null type-codes)
      (type-code-of 1)
      (reduce #'numeric-contagion type-codes)))

(define-type-inference-rule + (&rest type-codes)
  (if (null type-codes)
      (type-code-of 0)
      (reduce #'numeric-contagion type-codes)))

(define-type-inference-rule - (&rest type-codes)
  (reduce #'numeric-contagion type-codes))

(define-type-inference-rule / (numerator &rest denominators)
  (let ((initial-type
          (type-code-subtypecase numerator
            ((not number) (abort-type-inference))
            (rational (type-code-from-type-specifier 'rational))
            ((or float (complex float)) numerator)
            (t (type-code-from-type-specifier 'number)))))
    (reduce #'numeric-contagion denominators :initial-value initial-type)))

(define-type-inference-rule 1+ (number)
  (values-type-codes #'+ number (type-code-of 1)))

(define-type-inference-rule 1- (number)
  (values-type-codes #'- number (type-code-of 1)))

(define-type-inference-rule abs (number)
  (type-code-subtypecase number
    ((not number) (abort-type-inference))
    (real number)
    ((complex short-float) (type-code-from-type-specifier 'short-float))
    ((complex single-float) (type-code-from-type-specifier 'single-float))
    ((complex double-float) (type-code-from-type-specifier 'double-float))
    ((complex long-float) (type-code-from-type-specifier 'long-float))
    (t (type-code-from-type-specifier 'real))))

(define-type-inference-rule evenp (integer)
  (check-type-code integer integer)
  (type-code-from-type-specifier 't))

(define-type-inference-rule oddp (integer)
  (check-type-code integer integer)
  (type-code-from-type-specifier 't))

;; TODO exp, expt

;; TODO gcd

;; TODO lcm

;; TODO log

;; TODO mod, rem

;; TODO signum

;; TODO sqrt, isqrt

;; TODO make-random-state, random, random-state-p

;; TODO numberp, realp, rationalp, integerp, floatp

;; TODO cis

;; TODO complex, complexp, conjugate, phase, realpart, imagpart, upgraded-complex-part-type

;; TODO numerator, denominator

;; TODO rational, rationalize

;; TODO ash, integer-length, parse-integer

;; TODO boole

;; TODO logand, logandc1, logandc2, logeqv, logior, lognand, lognor, lognot, logorc1, logorc2, logxor

;; TODO logbitp, logcount, logtest

;; TODO byte, byte-size, byte-position

;; TODO deposit-field, dpb, ldb, ldb-test, mask-field

;; TODO decode-float, scale-float, float-radix, float-sign, float-digits, float-precision, integer-decode-float, float

(define-type-inference-rule float-sign (type-code-1 &optional (type-code-2 type-code-1))
  (check-type-code type-code-1 float)
  (check-type-code type-code-2 float)
  type-code-2)
