;;;; Â© 2016-2018 Marco Heisig - licensed under AGPLv3, see the file COPYING     -*- coding: utf-8 -*-

(in-package :petalisp-ir)

;;; This file defines the function COMPUTE-ITERATION-SPACES that, when
;;; invoked on a node and in the context of a valid *BUFFER-TABLE*, will
;;; compute a partitioning of the shape of that node into one or more
;;; subspaces.  These subspaces are chosen such that any path from a
;;; particular subspace upwards passes through exactly one input of each
;;; fusion node until reaching another node with an entry in the buffer
;;; table.
;;;
;;; We compute this partitioning by recursively traversing all nodes in the
;;; current subtree, while tracking both the current iteration space, and a
;;; mapping from the current iteration space to the iteration space of the
;;; root.  Each of these recursive functions returns a boolean, indicating
;;; whether any of the inputs of the current node, or any of the inputs
;;; thereof, is a fusion node.  When visiting any fusion node, each input
;;; that yields a true value after recursive processing is projected back
;;; to the iteration space of the root node and added to the list of
;;; iteration spaces that will be returned in the end.

(defvar *root*)
(defvar *kernel-iteration-spaces*)

(defun compute-iteration-spaces (root)
  (let ((*root* root)
        (*kernel-iteration-spaces* '()))
    (cond ((typep root 'reduction)
           (compute-iteration-spaces-aux
            root
            (enlarge-shape (shape root) (reduction-range root))
            (identity-transformation (1+ (rank root))))
           (map-into *kernel-iteration-spaces* #'shrink-shape *kernel-iteration-spaces*))
          (t (compute-iteration-spaces-aux
              root
              (shape root)
              (identity-transformation (rank root)))))
    ;; The list of iteration spaces generated by COMPUTE-ITERATION-SPACES
    ;; may be empty if there are zero fusion nodes in the subtree.  In this
    ;; case, we return the shape of the root instead.
    (or *kernel-iteration-spaces* (list (shape root)))))

;;; Return a boolean indicating whether any of the inputs of NODE, or any
;;; of the inputs thereof, is a fusion node.  Furthermore, whenever NODE is
;;; a fusion node, push a new iteration space for each input that contains
;;; no further fusion nodes.
(defgeneric compute-iteration-spaces-aux
    (node iteration-space transformation))

(defmethod compute-iteration-spaces-aux :around
    ((node strided-array) (iteration-space shape) (transformation transformation))
  (if (eq node *root*)
      (call-next-method)
      (if (nth-value 1 (gethash node *buffer-table*))
          nil
          (call-next-method))))

(defmethod compute-iteration-spaces-aux
    ((fusion fusion) (iteration-space shape) (transformation transformation))
  ;; Check whether any inputs are free of fusion nodes.  If so, push an
  ;; iteration space.
  (loop for input in (inputs fusion) do
    (let ((subspace (set-intersection iteration-space (shape input))))
      ;; If the input is unreachable, we do nothing.
      (unless (set-emptyp subspace)
        ;; If the input contains fusion nodes, we also do nothing.
        (unless (compute-iteration-spaces-aux input subspace transformation)
          ;; We have an outer fusion.  This means we have to add a new
          ;; iteration space, which we obtain by projecting the current
          ;; iteration space to the coordinate system of the root.
          (push (transform subspace (invert-transformation transformation))
                *kernel-iteration-spaces*)))))
  t)

(defmethod compute-iteration-spaces-aux
    ((reference reference) (iteration-space shape) (transformation transformation))
  (compute-iteration-spaces-aux
   (input reference)
   (transform
    (set-intersection iteration-space (shape reference))
    (transformation reference))
   (compose-transformations (transformation reference) transformation)))

(defmethod compute-iteration-spaces-aux
    ((reduction reduction) (iteration-space shape) (transformation transformation))
  (loop for input in (inputs reduction)
          thereis
          (compute-iteration-spaces-aux input iteration-space transformation)))

(defmethod compute-iteration-spaces-aux
    ((application application) (iteration-space shape) (transformation transformation))
  (loop for input in (inputs application)
          thereis
          (compute-iteration-spaces-aux input iteration-space transformation)))

(defmethod compute-iteration-spaces-aux
    ((immediate immediate) (iteration-space shape) (transformation transformation))
  (error "This is a default method that should never be reached."))
