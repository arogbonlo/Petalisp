#+TITLE: Petalisp

Petalisp is an attempt to generate high performance code for parallel
computers from a pure data flow specification. It is not a full blown
programming language, but rather a carefully crafted extension of Common
Lisp that allows for extreme optimization and parallelization.

** Showcases
Petalisp is still under development, so the following examples may still
change slightly. Nevertheless they give a good glimpse on what programming
with Petalisp will be like.

Example 1: transposing a matrix
#+BEGIN_SRC lisp
(defun transpose (A)
  (-> A (τ (m n) (n m))))
#+END_SRC

Example 2: a simple matrix multiplication
#+BEGIN_SRC lisp
(defun matrix-multiplication (A B)
  (β #'+
     (α #'*
        (-> A (τ (m n) (m 1 n)))
        (-> B (τ (n k) (1 k n))))))
#+END_SRC

Example 3: the numerical Jacobi scheme in two dimensions
#+BEGIN_SRC lisp
(defun jacobi-2d (grid iterations)
  (let ((interior (subspace grid (σ ((+ start 1) step (- end 1))
                                    ((+ start 1) step (- end 1))))))
    (if (zerop iterations) grid
        (jacobi-2d
         (fuse x
               (α #'* 0.25
                  (α #'+
                     (-> x (τ (i0 i1) ((+ i0 1) i1)) interior)
                     (-> x (τ (i0 i1) ((- i0 1) i1)) interior)
                     (-> x (τ (i0 i1) (i0 (+ i1 1))) interior)
                     (-> x (τ (i0 i1) (i0 (- i1 1))) interior))))
         (- iterations 1)))))
#+END_SRC

Example 4: A full Petalisp program to multiply two matrices and store the
result. The first matrix is read from a file, while the second one is
passed as a lisp array.
#+BEGIN_SRC lisp
(defun matrix-multiplication (A B)
  (β #'+
     (α #'*
        (-> A (τ (m n) (m 1 n)))
        (-> B (τ (n k) (1 k n))))))

(let ((result
        (matrix-multiplication
         (hdf5->petalisp "A.h5" "matrix")
         #2a((1 2) (3 4)))))
  (petalisp->hdf5
   result
   "scaled-matrix.h5"
   "output"))
#+END_SRC

